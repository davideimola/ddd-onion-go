// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: product.sql

package pgInventoryRepository

import (
	"context"

	uuid "github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const getProductByID = `-- name: GetProductByID :one
SELECT id, name, price, created_at, updated_at, quantity
FROM products
WHERE id = $1
`

type GetProductByIDParams struct {
	ProductID uuid.UUID
}

func (q *Queries) GetProductByID(ctx context.Context, arg GetProductByIDParams) (Product, error) {
	row := q.db.QueryRow(ctx, getProductByID, arg.ProductID)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Price,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Quantity,
	)
	return i, err
}

const getProductForUpdate = `-- name: GetProductForUpdate :one
SELECT id, name, price, created_at, updated_at, quantity
FROM products
WHERE id = $1
    FOR UPDATE
`

type GetProductForUpdateParams struct {
	ProductID uuid.UUID
}

func (q *Queries) GetProductForUpdate(ctx context.Context, arg GetProductForUpdateParams) (Product, error) {
	row := q.db.QueryRow(ctx, getProductForUpdate, arg.ProductID)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Price,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Quantity,
	)
	return i, err
}

const updateProduct = `-- name: UpdateProduct :exec
UPDATE products
SET name       = $1,
    price      = $2,
    updated_at = $3,
    quantity   = $4
WHERE id = $5
`

type UpdateProductParams struct {
	Name      string
	Price     pgtype.Numeric
	UpdatedAt pgtype.Timestamp
	Quantity  int32
	ProductID uuid.UUID
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) error {
	_, err := q.db.Exec(ctx, updateProduct,
		arg.Name,
		arg.Price,
		arg.UpdatedAt,
		arg.Quantity,
		arg.ProductID,
	)
	return err
}
