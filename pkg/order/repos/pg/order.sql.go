// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: order.sql

package pgOrderRepository

import (
	"context"

	order "davideimola.dev/ddd-onion/pkg/order"
	uuid "github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createOrder = `-- name: CreateOrder :exec
INSERT INTO orders (id, status, created_at, updated_at, customer_id)
VALUES ($1, $2, $3, $4, $5)
`

type CreateOrderParams struct {
	ID         uuid.UUID
	Status     order.Status
	CreatedAt  pgtype.Timestamp
	UpdatedAt  pgtype.Timestamp
	CustomerID uuid.UUID
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) error {
	_, err := q.db.Exec(ctx, createOrder,
		arg.ID,
		arg.Status,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.CustomerID,
	)
	return err
}

const getOrderForUpdate = `-- name: GetOrderForUpdate :one
SELECT id, customer_id, created_at, updated_at, status
FROM orders
WHERE id = $1
    FOR UPDATE
`

type GetOrderForUpdateParams struct {
	OrderID uuid.UUID
}

func (q *Queries) GetOrderForUpdate(ctx context.Context, arg GetOrderForUpdateParams) (Order, error) {
	row := q.db.QueryRow(ctx, getOrderForUpdate, arg.OrderID)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Status,
	)
	return i, err
}

const updateOrder = `-- name: UpdateOrder :exec
UPDATE orders
SET status     = $1,
    created_at = $2,
    updated_at = $3
WHERE id = $4
`

type UpdateOrderParams struct {
	Status    order.Status
	CreatedAt pgtype.Timestamp
	UpdatedAt pgtype.Timestamp
	OrderID   uuid.UUID
}

func (q *Queries) UpdateOrder(ctx context.Context, arg UpdateOrderParams) error {
	_, err := q.db.Exec(ctx, updateOrder,
		arg.Status,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.OrderID,
	)
	return err
}
